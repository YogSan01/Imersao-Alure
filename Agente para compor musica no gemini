{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"16jbPmwLTtrlOiPbsgU9hVW5RVR-YOIDB","timestamp":1747502011345},{"file_id":"1x5L9qr1pUiVunFLUfPxbMM9yMZzPWZ16","timestamp":1747497047896}],"authorship_tag":"ABX9TyO+WzOwD9TaZki2q1vTBJ5u"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["pip install -q google-generativeai"],"metadata":{"id":"cLCsCuGv9F01","executionInfo":{"status":"ok","timestamp":1747503049252,"user_tz":180,"elapsed":7972,"user":{"displayName":"Foz Sustentável - VIX","userId":"04843052349724074572"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["# Configura a API Key do Google Gemini\n","\n","import os\n","from google.colab import userdata\n","os.environ[\"GOOGLE_API_KEY\"] = userdata.get('GOOGLE_API_KEY')"],"metadata":{"id":"Z83VbI5Y9HiS","executionInfo":{"status":"ok","timestamp":1747503049791,"user_tz":180,"elapsed":525,"user":{"displayName":"Foz Sustentável - VIX","userId":"04843052349724074572"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["from google import genai\n","client = genai.Client()\n","MODEL_ID = \"gemini-2.0-flash\""],"metadata":{"id":"GUW3yy4NERrt","executionInfo":{"status":"ok","timestamp":1747503051475,"user_tz":180,"elapsed":1668,"user":{"displayName":"Foz Sustentável - VIX","userId":"04843052349724074572"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["import random\n","import google.generativeai as genai\n","import os # Para carregar a API key de variáveis de ambiente"],"metadata":{"id":"HFmfdY7q8nuk","executionInfo":{"status":"ok","timestamp":1747503052428,"user_tz":180,"elapsed":938,"user":{"displayName":"Foz Sustentável - VIX","userId":"04843052349724074572"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["# --- Funções de Teoria Musical Simplificadas (sem alterações) ---\n","\n","def get_root_note():\n","    \"\"\"Sugere ou pede uma nota raiz comum.\"\"\"\n","    common_roots = [\"C\", \"G\", \"D\", \"A\", \"E\", \"F\", \"Bb\", \"Eb\"]\n","    choice = input(f\"Você tem uma nota raiz preferida (ex: C, G, Am, Em)? (Deixe em branco para sugestão): \").strip().capitalize()\n","    if not choice:\n","        return random.choice(common_roots)\n","    # Simplificando para apenas a nota, sem indicar major/minor aqui ainda\n","    if choice.endswith('m') or choice.endswith('M'):\n","        return choice[0:-1] # Remove 'm' ou 'M' por enquanto, a escala definirá\n","    return choice[0] if choice else random.choice(common_roots)"],"metadata":{"id":"eJS9R1k099Q6","executionInfo":{"status":"ok","timestamp":1747503052462,"user_tz":180,"elapsed":26,"user":{"displayName":"Foz Sustentável - VIX","userId":"04843052349724074572"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["def suggest_scale_and_key(mood, genre):\n","    \"\"\"Sugere uma escala e tonalidade baseada no humor e gênero.\"\"\"\n","    root_candidate = get_root_note() # Ex: \"C\"\n","    scale_type = \"Major\" # Padrão\n","    key_root = root_candidate # Ex: \"C\"\n","\n","    if \"triste\" in mood or \"melancólico\" in mood or \"sombrio\" in mood:\n","        scale_type = \"Natural Minor\"\n","        # Tenta converter para relativa menor se for uma nota maior comum\n","        major_to_relative_minor = {\"C\": \"A\", \"G\": \"E\", \"D\": \"B\", \"A\": \"F#\", \"E\": \"C#\", \"F\": \"D\", \"Bb\": \"G\", \"Eb\": \"C\"}\n","        if root_candidate in major_to_relative_minor:\n","            key_root = major_to_relative_minor[root_candidate] + \"m\" # Ex: \"Am\"\n","        else:\n","            key_root = root_candidate + \"m\" # Ex: \"C#m\" (se root_candidate era C#)\n","\n","    elif \"alegre\" in mood or \"feliz\" in mood or \"otimista\" in mood:\n","        scale_type = \"Major\"\n","        key_root = root_candidate # Ex: \"C\" (já é o padrão se não for menor)\n","\n","    elif \"blues\" in genre.lower() or \"rock clássico\" in genre.lower():\n","        scale_type = \"Blues\" if random.choice([True, False]) else \"Pentatonic Major/Minor\"\n","        # A IA geralmente lida bem com \"blues scale\". Para pentatônica, a IA pode inferir.\n","        # Se for pentatônica menor, pode ser interessante sugerir a relativa menor.\n","        if \"pentatonic\" in scale_type.lower() and random.choice([True, False]): # 50% chance de sugerir pent. menor\n","            major_to_relative_minor = {\"C\": \"A\", \"G\": \"E\", \"D\": \"B\", \"A\": \"F#\", \"E\": \"C#\", \"F\": \"D\", \"Bb\": \"G\", \"Eb\": \"C\"}\n","            if root_candidate in major_to_relative_minor:\n","                key_root = major_to_relative_minor[root_candidate] + \"m\"\n","                scale_type = \"Pentatonic Minor\"\n","            else:\n","                key_root = root_candidate + \"m\"\n","                scale_type = \"Pentatonic Minor\"\n","        else:\n","            key_root = root_candidate\n","            if \"pentatonic\" in scale_type.lower():\n","                 scale_type = \"Pentatonic Major\"\n","\n","\n","    elif \"jazz\" in genre.lower():\n","        scale_type = random.choice([\"Dorian Mode\", \"Mixolydian Mode\", \"Major (com extensões)\"])\n","        key_root = root_candidate # Modos geralmente são baseados em notas raiz simples\n","\n","    elif \"folk\" in genre.lower() or \"acústico\" in genre.lower():\n","        scale_type = random.choice([\"Major\", \"Natural Minor\", \"Pentatonic Major\"])\n","        if \"Natural Minor\" in scale_type:\n","            major_to_relative_minor = {\"C\": \"A\", \"G\": \"E\", \"D\": \"B\", \"A\": \"F#\", \"E\": \"C#\", \"F\": \"D\", \"Bb\": \"G\", \"Eb\": \"C\"}\n","            if root_candidate in major_to_relative_minor:\n","                key_root = major_to_relative_minor[root_candidate] + \"m\"\n","            else:\n","                key_root = root_candidate + \"m\"\n","        else:\n","            key_root = root_candidate\n","\n","    # A tonalidade é a nota raiz da tonalidade (que pode ser diferente da nota raiz da escala, ex: C Major, Am Minor)\n","    # e o tipo de escala principal (Major ou Minor)\n","    final_key_display = \"\"\n","    if key_root.endswith('m'):\n","        final_key_display = f\"{key_root[:-1]} Minor\" # Ex: A Minor\n","    else:\n","        final_key_display = f\"{key_root} Major\" # Ex: C Major\n","\n","    # root_note_for_chords é a nota tônica da tonalidade, ex: \"Am\" ou \"C\"\n","    return final_key_display, scale_type, key_root"],"metadata":{"id":"6rSR-lqJ-ATw","executionInfo":{"status":"ok","timestamp":1747503052486,"user_tz":180,"elapsed":15,"user":{"displayName":"Foz Sustentável - VIX","userId":"04843052349724074572"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["def get_diatonic_chords(root_note_of_key, scale_type): # root_note_of_key ex: \"Am\" ou \"C\"\n","    \"\"\"Gera acordes diatônicos simplificados para a escala/tonalidade.\"\"\"\n","    chords = {}\n","    is_minor_key = 'm' in root_note_of_key.lower() or \"minor\" in scale_type.lower()\n","\n","    # Remove 'm' para obter a nota base para os cálculos, se for menor\n","    base_root = root_note_of_key[:-1] if root_note_of_key.endswith('m') else root_note_of_key\n","\n","    # Simplificando com base nas tonalidades mais comuns\n","    # Isso é uma grande simplificação e pode ser melhorado com mais lógica de teoria musical\n","    # Ou, melhor ainda, deixar a IA de música inferir com base na tonalidade.\n","    # Vamos focar nos acordes mais importantes para o prompt.\n","\n","    if is_minor_key:\n","        # Ex: Am (i), Dm (iv), Em ou E (v ou V), F (VI), G (VII), C (III)\n","        chord_map = { # Para Am\n","            \"i\": f\"{base_root}m\", \"iv\": \"Dm\", \"v\": \"Em\", \"V\": \"E\", \"VI\": \"F\", \"VII\": \"G\", \"III\": \"C\"\n","        }\n","        if base_root == \"E\": # Em\n","            chord_map = {\"i\": \"Em\", \"iv\": \"Am\", \"v\": \"Bm\", \"V\": \"B\", \"VI\": \"C\", \"VII\": \"D\", \"III\": \"G\"}\n","        elif base_root == \"D\": # Dm\n","            chord_map = {\"i\": \"Dm\", \"iv\": \"Gm\", \"v\": \"Am\", \"V\": \"A\", \"VI\": \"Bb\", \"VII\": \"C\", \"III\": \"F\"}\n","        # Adicionar mais mapeamentos para outras tonalidades menores se necessário\n","        return {\n","            \"i\": chord_map.get(\"i\", f\"{base_root}m\"),\n","            \"iv\": chord_map.get(\"iv\", f\"{base_root}m_placeholder_iv\"), # Placeholder\n","            \"v (menor) / V (Maior)\": f\"{chord_map.get('v', f'{base_root}m_placeholder_v')} ou {chord_map.get('V', f'{base_root}_placeholder_V')}\",\n","            \"VI\": chord_map.get(\"VI\", f\"{base_root}_placeholder_VI\"),\n","            \"VII (natural)\": chord_map.get(\"VII\", f\"{base_root}_placeholder_VII\"), # bVII na verdade\n","            \"III\": chord_map.get(\"III\", f\"{base_root}_placeholder_III\")\n","        }\n","    else: # Major\n","        # Ex: C (I), Dm (ii), Em (iii), F (IV), G (V), Am (vi)\n","        chord_map = { # Para C\n","            \"I\": base_root, \"ii\": \"Dm\", \"iii\": \"Em\", \"IV\": \"F\", \"V\": \"G\", \"vi\": \"Am\"\n","        }\n","        if base_root == \"G\":\n","            chord_map = {\"I\": \"G\", \"ii\": \"Am\", \"iii\": \"Bm\", \"IV\": \"C\", \"V\": \"D\", \"vi\": \"Em\"}\n","        elif base_root == \"D\":\n","            chord_map = {\"I\": \"D\", \"ii\": \"Em\", \"iii\": \"F#m\", \"IV\": \"G\", \"V\": \"A\", \"vi\": \"Bm\"}\n","        # Adicionar mais mapeamentos\n","        return {\n","            \"I\": chord_map.get(\"I\", base_root),\n","            \"ii\": chord_map.get(\"ii\", f\"{base_root}_placeholder_ii\"),\n","            \"iii\": chord_map.get(\"iii\", f\"{base_root}_placeholder_iii\"),\n","            \"IV\": chord_map.get(\"IV\", f\"{base_root}_placeholder_IV\"),\n","            \"V\": chord_map.get(\"V\", f\"{base_root}_placeholder_V\"),\n","            \"vi\": chord_map.get(\"vi\", f\"{base_root}m_placeholder_vi\")\n","        }"],"metadata":{"id":"ms15zTJp-Fmn","executionInfo":{"status":"ok","timestamp":1747503052510,"user_tz":180,"elapsed":15,"user":{"displayName":"Foz Sustentável - VIX","userId":"04843052349724074572"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["def suggest_cadences_and_progressions(key_chords, scale_type, root_note_of_key):\n","    \"\"\"Sugere cadências e progressões comuns.\"\"\"\n","    is_minor_key = 'm' in root_note_of_key.lower() or \"minor\" in scale_type.lower()\n","    progressions = []\n","    cadences = []\n","\n","    # Usando os nomes dos acordes diretamente dos key_chords\n","    if is_minor_key:\n","        i = key_chords.get('i', f\"{root_note_of_key}\")\n","        iv = key_chords.get('iv', \"iv_placeholder\")\n","        v_V_options = key_chords.get('v (menor) / V (Maior)', \"v/V_placeholder\").split(' ou ')\n","        v = v_V_options[0] # forma menor\n","        V = v_V_options[1] if len(v_V_options) > 1 else v # forma maior\n","        VI = key_chords.get('VI', \"VI_placeholder\")\n","        VII = key_chords.get('VII (natural)', \"VII_placeholder\") # bVII\n","        III = key_chords.get('III', \"III_placeholder\")\n","\n","        prog1 = f\"{i} - {VI} - {III} - {VII}\"\n","        prog2 = f\"{i} - {iv} - {V}\" # Usando o V (dominante maior) que é mais comum\n","        prog3 = f\"{i} - {iv} - {VII} - {III}\"\n","        progressions.extend([prog1, prog2, prog3])\n","        cadences.append(f\"Cadência Autêntica (V-i): {V}-{i}\")\n","        cadences.append(f\"Cadência Plagal (iv-i): {iv}-{i}\")\n","        cadences.append(f\"Finalizando com {V} (dominante) para {i} (tônica).\")\n","    else: # Major\n","        I = key_chords.get('I', root_note_of_key)\n","        ii = key_chords.get('ii', \"ii_placeholder\")\n","        IV = key_chords.get('IV', \"IV_placeholder\")\n","        V = key_chords.get('V', \"V_placeholder\")\n","        vi = key_chords.get('vi', \"vi_placeholder\")\n","\n","        prog1 = f\"{I} - {V} - {vi} - {IV}\"\n","        prog2 = f\"{I} - {IV} - {V}\"\n","        prog3 = f\"{ii} - {V} - {I}\"\n","        progressions.extend([prog1, prog2, prog3])\n","        cadences.append(f\"Cadência Autêntica Perfeita (V-I): {V}-{I}\")\n","        cadences.append(f\"Cadência Plagal (IV-I): {IV}-{I}\")\n","        cadences.append(f\"Finalizando com {V} (dominante) para {I} (tônica).\")\n","\n","    return random.sample(progressions, min(len(progressions), 2)), cadences"],"metadata":{"id":"7O2rK7dQ-Jvn","executionInfo":{"status":"ok","timestamp":1747503052529,"user_tz":180,"elapsed":9,"user":{"displayName":"Foz Sustentável - VIX","userId":"04843052349724074572"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["# --- Funções de Interação com Usuário (sem alterações) ---\n","def get_basic_info():\n","    print(\"Olá! Sou seu assistente de composição musical.\")\n","    print(\"Vamos criar uma música juntos.\")\n","    theme = input(\"Qual é o tema principal da música? (ex: amor perdido, celebração, jornada épica): \")\n","    keywords_str = input(\"Cite algumas palavras-chave relacionadas ao tema (separadas por vírgula): \")\n","    keywords = [kw.strip() for kw in keywords_str.split(',')]\n","    vocal_style = input(\"Como você imagina o vocal? (ex: masculino suave, feminino poderoso, rap, sussurrado, coro): \")\n","    music_genre = input(\"Qual o estilo musical principal? (ex: Pop, Rock, Eletrônica, Folk, Jazz, Blues, Clássica): \")\n","    return theme, keywords, vocal_style, music_genre"],"metadata":{"id":"lO1Zjfzh-Nhe","executionInfo":{"status":"ok","timestamp":1747503052564,"user_tz":180,"elapsed":27,"user":{"displayName":"Foz Sustentável - VIX","userId":"04843052349724074572"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["def ask_specific_questions(genre, theme):\n","    print(\"\\n--- Aprofundando os Detalhes ---\")\n","    details = {}\n","\n","    # Perguntas gerais\n","    mood = input(\"Qual a sensação/emoção principal que a música deve transmitir? (ex: alegre, triste, épica, nostálgica, energética, calma): \")\n","    details[\"mood\"] = mood.lower()\n","\n","    tempo_options = [\"lento (ex: balada, ~60-80 BPM)\",\n","                     \"moderado (ex: pop mid-tempo, ~90-110 BPM)\",\n","                     \"rápido (ex: rock energético, dance, ~120-140+ BPM)\"]\n","    print(\"Qual o andamento (tempo) desejado?\")\n","    for i, opt in enumerate(tempo_options):\n","        print(f\"{i+1}. {opt}\")\n","    tempo_choice = input(\"Escolha o número ou descreva: \")\n","    if tempo_choice.isdigit() and 1 <= int(tempo_choice) <= len(tempo_options):\n","        details[\"tempo\"] = tempo_options[int(tempo_choice)-1].split('(')[0].strip()\n","    else:\n","        details[\"tempo\"] = tempo_choice # Permite descrição livre\n","\n","    # Perguntas específicas por gênero (exemplos)\n","    if \"pop\" in genre.lower():\n","        details[\"pop_feel\"] = input(\"Para Pop: Mais radiofônico e 'catchy' ou mais alternativo/indie? \")\n","        details[\"instrumentation_pop\"] = input(\"Instrumentos chave para Pop? (ex: sintetizadores, batida eletrônica, guitarra limpa): \")\n","    elif \"rock\" in genre.lower():\n","        details[\"rock_subgenre\"] = input(\"Para Rock: Algum subgênero em mente? (ex: Clássico, Hard Rock, Alternativo, Punk, Metal): \")\n","        details[\"instrumentation_rock\"] = input(\"Instrumentos chave para Rock? (ex: guitarra distorcida, bateria pesada, baixo marcante): \")\n","        details[\"rock_energy\"] = input(\"Nível de energia do Rock? (ex: Hino de estádio, balada poderosa, agressivo): \")\n","    elif \"eletrônica\" in genre.lower() or \"edm\" in genre.lower():\n","        details[\"electronic_subgenre\"] = input(\"Para Eletrônica: Algum subgênero? (ex: House, Techno, Trance, Synthwave, Ambient): \")\n","        details[\"electronic_vibe\"] = input(\"Qual a vibe da música eletrônica? (ex: dançante, atmosférica, nostálgica, futurista): \")\n","        details[\"instrumentation_electronic\"] = input(\"Elementos sonoros chave? (ex: synth lead, pads, baixo pulsante, samples vocais): \")\n","    elif \"folk\" in genre.lower() or \"acústico\" in genre.lower():\n","        details[\"folk_instrumentation\"] = input(\"Para Folk/Acústico: Instrumentos principais? (ex: violão, voz, gaita, bandolim, percussão leve): \")\n","        details[\"folk_storytelling\"] = input(\"A música deve ter um foco forte em contar uma história? (sim/não): \")\n","    elif \"jazz\" in genre.lower():\n","        details[\"jazz_style\"] = input(\"Para Jazz: Estilo preferido? (ex: Swing, Bebop, Cool Jazz, Fusion, Smooth Jazz): \")\n","        details[\"jazz_instrumentation\"] = input(\"Instrumentos chave para Jazz? (ex: piano, contrabaixo, bateria com vassourinhas, saxofone, trompete): \")\n","        details[\"jazz_improvisation\"] = input(\"Deve haver espaço para improvisação instrumental? (sim/não): \")\n","\n","    # Pergunta sobre estrutura\n","    structure_suggestion = \"Intro - Verso 1 - Refrão - Verso 2 - Refrão - Ponte - (Solo Instrumental) - Refrão - Outro\"\n","    details[\"structure\"] = input(f\"Alguma preferência de estrutura? (Sugestão: {structure_suggestion}): \") or structure_suggestion\n","\n","    return details"],"metadata":{"id":"RjYDl1a1-PtG","executionInfo":{"status":"ok","timestamp":1747503052594,"user_tz":180,"elapsed":23,"user":{"displayName":"Foz Sustentável - VIX","userId":"04843052349724074572"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["# --- Geração do Prompt com GEMINI ---\n","def generate_music_prompt_with_gemini(basic_info, specific_details, music_elements):\n","    \"\"\"Gera um prompt para uma IA de música usando o Gemini.\"\"\"\n","    try:\n","        # Tente carregar a API Key de uma variável de ambiente\n","        # Em um ambiente como o Google Colab, você pode usar 'userdata'\n","        # from google.colab import userdata\n","        # api_key = userdata.get('GOOGLE_API_KEY')\n","        # Se não estiver no Colab, use variáveis de ambiente:\n","        api_key = os.getenv(\"GOOGLE_API_KEY\")\n","        if not api_key:\n","            api_key = input(\"Por favor, insira sua Google API Key para o Gemini: \")\n","\n","        genai.configure(api_key=api_key)\n","    except Exception as e:\n","        print(f\"Erro ao configurar a API do Gemini: {e}\")\n","        print(\"Certifique-se de ter a variável de ambiente GOOGLE_API_KEY definida ou insira a chave manualmente.\")\n","        return \"Erro: Falha ao configurar a API do Gemini. Não foi possível gerar o prompt.\"\n","\n","    model = genai.GenerativeModel(MODEL_ID) # Ou 'gemini-pro' ou outro modelo adequado\n","\n","    theme, keywords, vocal_style, music_genre = basic_info\n","    key_signature_display, scale_type, root_note_of_key = music_elements[\"key_signature\"]\n","    suggested_chords_dict = music_elements[\"chords\"]\n","    progressions, cadences = music_elements[\"progressions_cadences\"]\n","\n","    # Formatando as informações para o Gemini\n","    basic_info_str = f\"- Tema: {theme}\\n\"\n","    basic_info_str += f\"- Palavras-chave: {', '.join(keywords)}\\n\"\n","    basic_info_str += f\"- Estilo Vocal: {vocal_style}\\n\"\n","    basic_info_str += f\"- Gênero Musical Principal: {music_genre}\"\n","\n","    specific_details_str = f\"- Sensação/Emoção Principal: {specific_details['mood']}\\n\"\n","    specific_details_str += f\"- Andamento (Tempo): {specific_details['tempo']}\\n\"\n","    if \"pop_feel\" in specific_details: specific_details_str += f\"- Estilo Pop: {specific_details['pop_feel']}. Instrumentação: {specific_details.get('instrumentation_pop', 'típica do pop')}.\\n\"\n","    if \"rock_subgenre\" in specific_details: specific_details_str += f\"- Subgênero do Rock: {specific_details['rock_subgenre']}. Energia: {specific_details.get('rock_energy', 'moderada')}. Instrumentação: {specific_details.get('instrumentation_rock', 'guitarras, baixo, bateria')}.\\n\"\n","    if \"electronic_subgenre\" in specific_details: specific_details_str += f\"- Subgênero Eletrônico: {specific_details['electronic_subgenre']}. Vibe: {specific_details.get('electronic_vibe', 'ambiente')}. Elementos: {specific_details.get('instrumentation_electronic', 'sintetizadores e batidas')}.\\n\"\n","    if \"folk_instrumentation\" in specific_details: specific_details_str += f\"- Instrumentação Folk/Acústica: {specific_details['folk_instrumentation']}. Foco em storytelling: {specific_details.get('folk_storytelling', 'sim')}.\\n\"\n","    if \"jazz_style\" in specific_details: specific_details_str += f\"- Estilo de Jazz: {specific_details['jazz_style']}. Instrumentação: {specific_details.get('jazz_instrumentation', 'piano, baixo, bateria')}. Improvisação: {specific_details.get('jazz_improvisation', 'sim')}.\\n\"\n","    specific_details_str += f\"- Estrutura da Música Sugerida: {specific_details['structure']}\"\n","\n","    music_elements_str = f\"- Tonalidade Sugerida: {key_signature_display}\\n\"\n","    music_elements_str += f\"- Baseada na escala: {scale_type} (raiz da tonalidade: {root_note_of_key})\\n\"\n","    music_elements_str += f\"- Acordes Principais Sugeridos (baseados na tonalidade):\\n\"\n","    for roman, name in suggested_chords_dict.items():\n","        music_elements_str += f\"  - {roman}: {name}\\n\"\n","    music_elements_str += \"- Exemplos de Progressões de Acordes Sugeridas:\\n\"\n","    for i, prog in enumerate(progressions):\n","        music_elements_str += f\"  - Progressão {i+1}: {prog}\\n\"\n","    music_elements_str += \"- Sugestões para Cadências (finalizações):\\n\"\n","    for cad in cadences:\n","        music_elements_str += f\"  - {cad}\\n\"\n","\n","    # Meta-prompt para o Gemini\n","    # (Este prompt instrui o Gemini sobre como construir o prompt final para a IA de música)\n","    gemini_system_instruction = f\"\"\"\n","Você é um assistente especializado em criar prompts detalhados e inspiradores para IAs de geração de música (como Suno AI, Udio, AIVA, etc.).\n","Seu objetivo é pegar as informações fornecidas pelo usuário e as sugestões de teoria musical e transformá-las em um ÚNICO prompt coeso e otimizado.\n","\n","O prompt final que você gerar deve:\n","1. Começar diretamente com a instrução para a IA de música (ex: \"Crie uma música...\", \"Gere uma faixa instrumental...\").\n","2. Ser escrito em linguagem natural, como se um humano estivesse pedindo a música.\n","3. Incorporar de forma fluida todos os detalhes fornecidos: tema, palavras-chave, estilo vocal, gênero, humor, andamento, e detalhes específicos do gênero.\n","4. Incluir uma seção clara de \"Detalhes Musicais Sugeridos\" contendo a tonalidade, escala, acordes e progressões. Se os acordes tiverem \"placeholder\" no nome, use o nome do acorde mais provável ou omita esse acorde específico da lista, focando nos que estão bem definidos.\n","5. Mencionar a estrutura da música.\n","6. Conter uma seção de \"Instruções Adicionais para a IA\" com dicas gerais para a qualidade da música (melodia, instrumentação, letra, dinâmica).\n","7. Ser abrangente, mas evitar redundâncias desnecessárias.\n","8. NÃO inclua esta introdução ou qualquer comentário seu sobre o processo de criação do prompt. Apenas o prompt final para a IA de música.\n","\n","Aqui estão as informações coletadas:\n","\n","--- INFORMAÇÕES BÁSICAS ---\n","{basic_info_str}\n","\n","--- DETALHES ESPECÍFICOS ---\n","{specific_details_str}\n","\n","--- ELEMENTOS MUSICAIS SUGERIDOS ---\n","{music_elements_str}\n","--- FIM DAS INFORMAÇÕES ---\n","\n","Agora, por favor, gere o prompt para a IA de música.\n","\"\"\"\n","    try:\n","        print(\"\\nGerando prompt com o Gemini... Isso pode levar alguns segundos.\")\n","        response = model.generate_content(gemini_system_instruction)\n","\n","        # Adicionar verificação de segurança, se necessário\n","        if not response.parts:\n","             if hasattr(response, 'prompt_feedback') and response.prompt_feedback.block_reason:\n","                return f\"Erro: Geração bloqueada pelo Gemini. Razão: {response.prompt_feedback.block_reason_message}\"\n","             else:\n","                return \"Erro: Resposta vazia do Gemini. Verifique as configurações ou o prompt.\"\n","        return response.text\n","\n","    except Exception as e:\n","        print(f\"Ocorreu um erro ao chamar a API do Gemini: {e}\")\n","        return \"Erro: Falha ao comunicar com o Gemini. Não foi possível gerar o prompt.\""],"metadata":{"id":"W9_eWLpl-XCP","executionInfo":{"status":"ok","timestamp":1747503052611,"user_tz":180,"elapsed":8,"user":{"displayName":"Foz Sustentável - VIX","userId":"04843052349724074572"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["# --- Configurações Globais (podem ser movidas para um arquivo de configuração se preferir) ---\n","DEFAULT_GEMINI_MODEL = 'GOOGLE_API_KEY' # Ou 'gemini-pro', etc.\n","# A API Key ainda será buscada automaticamente ou solicitada.\n","\n","def call_gemini(prompt_text: str) -> str:\n","    \"\"\"\n","    Envia um prompt para um modelo Gemini pré-configurado e retorna a resposta em texto.\n","\n","    A API Key do Google será buscada automaticamente nas variáveis de ambiente\n","    ou solicitada ao usuário se não for encontrada. O modelo usado é\n","    definido pela constante DEFAULT_GEMINI_MODEL.\n","\n","    Args:\n","        prompt_text (str): O texto do prompt a ser enviado para o Gemini.\n","\n","    Returns:\n","        str: A resposta de texto do Gemini ou uma mensagem de erro.\n","    \"\"\"\n","    api_key_to_use = None\n","\n","    # 1. Tenta obter da variável de ambiente\n","    api_key_to_use = os.getenv(\"GOOGLE_API_KEY\")\n","\n","    # 2. Se não encontrou, tenta obter do userdata (para Google Colab)\n","    if not api_key_to_use:\n","        try:\n","            from google.colab import userdata\n","            api_key_to_use = userdata.get('GOOGLE_API_KEY')\n","        except ImportError:\n","            # Não está no Colab ou userdata não está disponível/configurado\n","            pass\n","        except Exception:\n","            # Outro erro ao tentar obter do userdata\n","            pass\n","\n","    # 3. Se ainda não encontrou, solicita ao usuário\n","    if not api_key_to_use:\n","        print(\"Chave da API do Google não encontrada automaticamente.\")\n","        api_key_to_use = input(\"Por favor, insira sua Google API Key: \").strip()\n","        if not api_key_to_use:\n","            return \"Erro: Nenhuma chave da API do Google foi fornecida.\"\n","\n","    try:\n","        genai.configure(api_key=api_key_to_use)\n","        model = genai.GenerativeModel(DEFAULT_GEMINI_MODEL) # Usa o modelo padrão definido\n","\n","        print(f\"\\nEnviando prompt para o modelo {DEFAULT_GEMINI_MODEL}...\")\n","        response = model.generate_content(\n","            prompt_text\n","            # Você ainda pode adicionar generation_config e safety_settings aqui se necessário\n","            # generation_config=genai.types.GenerationConfig(\n","            #     candidate_count=1,\n","            #     temperature=0.7,\n","            # ),\n","            # safety_settings=[\n","            #     {\"category\": \"HARM_CATEGORY_HARASSMENT\", \"threshold\": \"BLOCK_MEDIUM_AND_ABOVE\"},\n","            #     # ... outras configurações de segurança\n","            # ]\n","        )\n","\n","        # Tratamento de resposta bloqueada\n","        if not response.parts:\n","            if hasattr(response, 'prompt_feedback') and response.prompt_feedback.block_reason:\n","                block_reason = response.prompt_feedback.block_reason\n","                block_message = \"Não especificado\"\n","                if hasattr(response.prompt_feedback, 'block_reason_message'):\n","                     block_message = response.prompt_feedback.block_reason_message\n","\n","                safety_ratings_details = []\n","                if hasattr(response.prompt_feedback, 'safety_ratings') and response.prompt_feedback.safety_ratings:\n","                    for rating in response.prompt_feedback.safety_ratings:\n","                        safety_ratings_details.append(f\"  - Categoria: {rating.category.name}, Probabilidade: {rating.probability.name}\")\n","                details_str = \"\\n\".join(safety_ratings_details)\n","\n","                return (f\"Erro: A geração foi bloqueada pelo Gemini.\\n\"\n","                        f\"Razão: {block_reason.name if hasattr(block_reason, 'name') else block_reason} ({block_message}).\\n\"\n","                        f\"Detalhes da classificação de segurança do prompt (se disponíveis):\\n{details_str if details_str else 'Nenhum detalhe de classificação de segurança fornecido.'}\")\n","            else:\n","                return \"Erro: Resposta vazia do Gemini. Verifique o prompt ou as configurações de segurança.\"\n","\n","        return response.text\n","\n","    except ValueError as ve:\n","        if \"API_KEY\" in str(ve).upper():\n","            return f\"Erro de configuração: {ve}. Verifique se a chave da API é válida e está configurada corretamente.\"\n","        return f\"Erro de valor: {ve}\"\n","    except Exception as e:\n","        # Para depuração, pode ser útil ver o tipo de exceção\n","        # print(f\"Tipo da exceção: {type(e)}\")\n","        return f\"Erro ao chamar a API do Gemini: {e}\"\n"],"metadata":{"id":"kIwtHLyvGXN0","executionInfo":{"status":"ok","timestamp":1747503052627,"user_tz":180,"elapsed":7,"user":{"displayName":"Foz Sustentável - VIX","userId":"04843052349724074572"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["# --- Fluxo Principal ---\n","def main():\n","    basic_info = get_basic_info()\n","    theme, _, _, genre = basic_info # Desempacotando para usar gênero e tema\n","\n","    specific_details = ask_specific_questions(genre, theme)\n","\n","    print(\"\\n--- Definindo Elementos Musicais ---\")\n","    # key_signature_display: \"C Major\" ou \"Am Minor\"\n","    # scale_type: \"Major\", \"Natural Minor\", \"Blues\", etc.\n","    # root_note_of_key: \"C\" ou \"Am\" (a tônica da tonalidade)\n","    key_signature_display, scale_type, root_note_of_key = suggest_scale_and_key(specific_details[\"mood\"], genre)\n","    print(f\"Tonalidade sugerida: {key_signature_display} (baseada na escala {scale_type} com tônica em {root_note_of_key})\")\n","\n","    suggested_chords = get_diatonic_chords(root_note_of_key, scale_type)\n","    print(f\"Acordes diatônicos base (sugestão): {suggested_chords}\")\n","\n","    progressions, cadences = suggest_cadences_and_progressions(suggested_chords, scale_type, root_note_of_key)\n","    print(f\"Progressões sugeridas: {progressions}\")\n","    print(f\"Cadências sugeridas: {cadences}\")\n","\n","    music_elements = {\n","        \"key_signature\": (key_signature_display, scale_type, root_note_of_key),\n","        \"chords\": suggested_chords,\n","        \"progressions_cadences\": (progressions, cadences)\n","    }\n","\n","    # Usa a nova função para gerar o prompt com o Gemini\n","    final_prompt = generate_music_prompt_with_gemini(basic_info, specific_details, music_elements)\n","\n","    if not final_prompt.startswith(\"Erro:\"):\n","      model = genai.GenerativeModel(MODEL_ID)\n","      musica_final = model.generate_content(final_prompt)\n","      print(musica_final.text)\n","\n","\n","if __name__ == \"__main__\":\n","    main()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"zYB-Bm8DC4Mw","executionInfo":{"status":"ok","timestamp":1747503139237,"user_tz":180,"elapsed":16466,"user":{"displayName":"Foz Sustentável - VIX","userId":"04843052349724074572"}},"outputId":"bd6ea65d-8968-4634-cca8-6cd578fc8d3f"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["Olá! Sou seu assistente de composição musical.\n","Vamos criar uma música juntos.\n","Qual é o tema principal da música? (ex: amor perdido, celebração, jornada épica): \n","Cite algumas palavras-chave relacionadas ao tema (separadas por vírgula): \n","Como você imagina o vocal? (ex: masculino suave, feminino poderoso, rap, sussurrado, coro): \n","Qual o estilo musical principal? (ex: Pop, Rock, Eletrônica, Folk, Jazz, Blues, Clássica): \n","\n","--- Aprofundando os Detalhes ---\n","Qual a sensação/emoção principal que a música deve transmitir? (ex: alegre, triste, épica, nostálgica, energética, calma): \n","Qual o andamento (tempo) desejado?\n","1. lento (ex: balada, ~60-80 BPM)\n","2. moderado (ex: pop mid-tempo, ~90-110 BPM)\n","3. rápido (ex: rock energético, dance, ~120-140+ BPM)\n","Escolha o número ou descreva: \n","Alguma preferência de estrutura? (Sugestão: Intro - Verso 1 - Refrão - Verso 2 - Refrão - Ponte - (Solo Instrumental) - Refrão - Outro): \n","\n","--- Definindo Elementos Musicais ---\n","Você tem uma nota raiz preferida (ex: C, G, Am, Em)? (Deixe em branco para sugestão): \n","Tonalidade sugerida: F Major (baseada na escala Major com tônica em F)\n","Acordes diatônicos base (sugestão): {'I': 'F', 'ii': 'Dm', 'iii': 'Em', 'IV': 'F', 'V': 'G', 'vi': 'Am'}\n","Progressões sugeridas: ['Dm - G - F', 'F - G - Am - F']\n","Cadências sugeridas: ['Cadência Autêntica Perfeita (V-I): G-F', 'Cadência Plagal (IV-I): F-F', 'Finalizando com G (dominante) para F (tônica).']\n","\n","Gerando prompt com o Gemini... Isso pode levar alguns segundos.\n","Ok, aqui está a música criada de acordo com as suas especificações.\n","\n","**Título: Eco no Deserto**\n","\n","**Gênero Musical Principal:** Indie Folk\n","\n","**Estilo Vocal:** Suave e Etéreo, com harmonias leves (similar a Fleet Foxes ou Bon Iver)\n","\n","**Sensação/Emoção Principal:** Nostalgia Melancólica, Esperança Subjacente\n","\n","**Andamento (Tempo):** Moderado (aprox. 90 BPM)\n","\n","**Tema:** A busca por um lar perdido, tanto físico quanto emocional, e a persistência da memória.\n","\n","**Palavras-chave:** Deserto, Memória, Lar, Eco\n","\n","**Tonalidade:** Fá Maior\n","\n","**Acordes Principais:** F, Dm, Em, G, Am\n","\n","**Estrutura:** Intro - Verso 1 - Refrão - Verso 2 - Refrão - Ponte - (Solo Instrumental) - Refrão - Outro\n","\n","---\n","\n","**(Intro - Instrumental - 8 compassos)**\n","\n","*   **Instrumentação:** Violão dedilhado em Fá Maior, com uma flauta suave tocando uma melodia simples baseada na escala de Fá. Uma bateria discreta entra no 4º compasso com um ritmo leve e cadenciado.\n","\n","**(Verso 1)**\n","\n","(F)A areia do (Dm)deserto beija meus (Em)pés,\n","(Am)E cada grão (G)sussurra (F)vez após vez.\n","(F)A imagem de um (Dm)lar, tão distante e (Em)vago,\n","(Am)Um eco no (G)tempo, um (F)antigo afago.\n","(F)Procuro em cada (Dm)miragem uma (Em)pista,\n","(Am)Na esperança de (G)encontrar (F)a porta que me assiste.\n","\n","**(Refrão)**\n","\n","(Dm)Deserto, você guarda a (G)memória,\n","(F)De um lar que se (F)foi, uma história.\n","(Dm)Eco do passado, (G)forte a chamar,\n","(F)Um dia eu voltarei (F)para o meu lar.\n","\n","**(Verso 2)**\n","\n","(F)O sol castiga, o (Dm)vento sopra e (Em)leva,\n","(Am)Os sonhos que (G)guardo, a (F)alma que me acena.\n","(F)As dunas se (Dm)erguem, montanhas de (Em)areia,\n","(Am)Lembranças (G)escondidas, (F)uma antiga teia.\n","(F)No céu estrelado, (Dm)busco um (Em)sinal,\n","(Am)A força que me (G)guia, (F)para o meu ideal.\n","\n","**(Refrão)**\n","\n","(Dm)Deserto, você guarda a (G)memória,\n","(F)De um lar que se (F)foi, uma história.\n","(Dm)Eco do passado, (G)forte a chamar,\n","(F)Um dia eu voltarei (F)para o meu lar.\n","\n","**(Ponte)**\n","\n","(Am)O tempo passa, a (G)sede aperta,\n","(F)Mas a esperança (F)nunca se liberta.\n","(Am)A fé me move, o (G)amor me guia,\n","(F)Através do deserto, (F)dia após dia.\n","\n","**(Solo Instrumental - 16 compassos)**\n","\n","*   **Instrumentação:** Violão solo em Fá Maior, com a flauta respondendo a algumas frases. A bateria ganha um pouco mais de intensidade, mas mantendo o ritmo moderado. Utilização da escala de Fá maior com algumas variações melódicas e bends no violão. O solo pode explorar os acordes principais da música.\n","\n","**(Refrão)**\n","\n","(Dm)Deserto, você guarda a (G)memória,\n","(F)De um lar que se (F)foi, uma história.\n","(Dm)Eco do passado, (G)forte a chamar,\n","(F)Um dia eu voltarei (F)para o meu lar.\n","\n","**(Outro)**\n","\n","(F)Oh, lar... (Dm)Oh, memória... (Em)Eco no (Am)deserto... (G)Eco... (F)\n","\n","*   **Instrumentação:** O violão dedilhado diminui gradualmente, a flauta repete a melodia da introdução, e a bateria some, deixando apenas o som do violão diminuindo até o silêncio. Finaliza com o acorde de Fá maior.\n","\n","---\n","\n","**Observações:**\n","\n","*   A melodia vocal deve ser simples e repetitiva, mas com nuances que transmitam a emoção desejada.\n","*   As harmonias vocais no estilo Fleet Foxes ou Bon Iver devem ser utilizadas principalmente nos refrões e na ponte para dar mais profundidade e impacto emocional.\n","*   A progressão de acordes sugerida (Dm - G - F) é utilizada principalmente nos refrões para criar uma sensação de resolução e esperança.\n","*   O uso do acorde de G antes do Fá em algumas seções ajuda a criar uma cadência autêntica perfeita, dando uma sensação de resolução.\n","*   A dinâmica da música deve variar para criar contrastes e manter o interesse do ouvinte. Por exemplo, os versos podem ser mais suaves e íntimos, enquanto os refrões podem ser mais fortes e emocionais.\n","*   O solo instrumental deve ser expressivo e complementar a melodia vocal, adicionando uma camada extra de emoção à música.\n","\n","Espero que essa música atenda às suas expectativas! Lembre-se que esta é uma representação textual da música, e a interpretação real e a execução instrumental são cruciais para trazer a música à vida.\n","\n"]}]}]}